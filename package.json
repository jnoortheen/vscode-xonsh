{
  "name": "xonsh",
  "displayName": "Xonsh IDE",
  "description": "Xonsh language support.",
  "version": "0.2.6",
  "publisher": "jnoortheen",
  "icon": "images/icon.png",
  "license": "MIT",
  "engines": {
    "vscode": "^1.47.0"
  },
  "categories": [
    "Programming Languages",
    "Formatters",
    "Snippets"
  ],
  "keywords": [
    "Xonsh",
    "xsh",
    "IDE"
  ],
  "bugs": {
    "url": "https://github.com/jnoortheen/xonsh-vscode-ext/issues"
  },
  "homepage": "https://github.com/jnoortheen/xonsh-vscode-ext",
  "repository": {
    "type": "git",
    "url": "https://github.com/jnoortheen/xonsh-vscode-ext"
  },
  "main": "dist/index.js",
  "activationEvents": [
    "onLanguage:xonsh"
  ],
  "contributes": {
    "languages": [
      {
        "id": "xonsh",
        "aliases": [
          "Xonsh",
          "xsh"
        ],
        "extensions": [
          ".xsh"
        ],
        "filenames": [
          ".xonshrc",
          "xonshrc"
        ],
        "firstLine": "^#!\\s*/?.*\\bxonsh[0-9.-]*\\b",
        "configuration": "./language-configuration.json"
      }
    ],
    "configuration": [
      {
        "title": "Xonsh Language Server configuration",
        "properties": {
          "pylsp.executable": {
            "type": "string",
            "default": "pylsp",
            "description": "Language server executable"
          },
          "pylsp.configurationSources": {
            "type": "array",
            "default": [
              "pycodestyle",
              "pyflakes"
            ],
            "description": "List of configuration sources to use.",
            "items": {
              "type": "string",
              "enum": [
                "pycodestyle",
                "pyflakes"
              ]
            },
            "uniqueItems": true
          },
          "pylsp.plugins.jedi.extra_paths": {
            "type": "array",
            "default": [],
            "description": "Define extra paths for jedi.Script."
          },
          "pylsp.plugins.jedi.env_vars": {
            "type": "dictionary",
            "default": null,
            "description": "Define environment variables for jedi.Script and Jedi.names."
          },
          "pylsp.plugins.jedi.environment": {
            "type": "string",
            "default": null,
            "description": "Define environment for jedi.Script and Jedi.names."
          },
          "pylsp.plugins.jedi_completion.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.jedi_completion.include_params": {
            "type": "boolean",
            "default": true,
            "description": "Auto-completes methods and classes with tabstops for each parameter."
          },
          "pylsp.plugins.jedi_completion.include_class_objects": {
            "type": "boolean",
            "default": true,
            "description": "Adds class objects as a separate completion item."
          },
          "pylsp.plugins.jedi_completion.fuzzy": {
            "type": "boolean",
            "default": false,
            "description": "Enable fuzzy when requesting autocomplete."
          },
          "pylsp.plugins.jedi_definition.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.jedi_definition.follow_imports": {
            "type": "boolean",
            "default": true,
            "description": "The goto call will follow imports."
          },
          "pylsp.plugins.jedi_definition.follow_builtin_imports": {
            "type": "boolean",
            "default": true,
            "description": "If follow_imports is True will decide if it follow builtin imports."
          },
          "pylsp.plugins.jedi_hover.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.jedi_references.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.jedi_signature_help.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.jedi_symbols.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.jedi_symbols.all_scopes": {
            "type": "boolean",
            "default": true,
            "description": "If True lists the names of all scopes instead of only the module namespace."
          },
          "pylsp.plugins.mccabe.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.mccabe.threshold": {
            "type": "number",
            "default": 15,
            "description": "The minimum threshold that triggers warnings about cyclomatic complexity."
          },
          "pylsp.plugins.preload.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.preload.modules": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "List of modules to import on startup"
          },
          "pylsp.plugins.pycodestyle.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.pycodestyle.exclude": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Exclude files or directories which match these patterns."
          },
          "pylsp.plugins.pycodestyle.filename": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "When parsing directories, only check filenames matching these patterns."
          },
          "pylsp.plugins.pycodestyle.select": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Select errors and warnings"
          },
          "pylsp.plugins.pycodestyle.ignore": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Ignore errors and warnings"
          },
          "pylsp.plugins.pycodestyle.hangClosing": {
            "type": "boolean",
            "default": null,
            "description": "Hang closing bracket instead of matching indentation of opening bracket's line."
          },
          "pylsp.plugins.pycodestyle.maxLineLength": {
            "type": "number",
            "default": null,
            "description": "Set maximum allowed line length."
          },
          "pylsp.plugins.pydocstyle.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.pydocstyle.convention": {
            "type": "string",
            "default": null,
            "enum": [
              "pep257",
              "numpy"
            ],
            "description": "Choose the basic list of checked errors by specifying an existing convention."
          },
          "pylsp.plugins.pydocstyle.addIgnore": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Ignore errors and warnings in addition to the specified convention."
          },
          "pylsp.plugins.pydocstyle.addSelect": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Select errors and warnings in addition to the specified convention."
          },
          "pylsp.plugins.pydocstyle.ignore": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Ignore errors and warnings"
          },
          "pylsp.plugins.pydocstyle.select": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "Select errors and warnings"
          },
          "pylsp.plugins.pydocstyle.match": {
            "type": "string",
            "default": "(?!test_).*\\.py",
            "description": "Check only files that exactly match the given regular expression; default is to match files that don't start with 'test_' but end with '.py'."
          },
          "pylsp.plugins.pydocstyle.matchDir": {
            "type": "string",
            "default": "[^\\.].*",
            "description": "Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot."
          },
          "pylsp.plugins.pyflakes.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.pylint.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.pylint.args": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": false,
            "description": "Arguments to pass to pylint."
          },
          "pylsp.plugins.pylint.executable": {
            "type": "string",
            "default": null,
            "description": "Executable to run pylint with. Enabling this will run pylint on unsaved files via stdin. Can slow down workflow. Only works with python3."
          },
          "pylsp.plugins.rope_completion.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.plugins.yapf.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the plugin."
          },
          "pylsp.rope.extensionModules": {
            "type": "string",
            "default": null,
            "description": "Builtin and c-extension modules that are allowed to be imported and inspected by rope."
          },
          "pylsp.rope.ropeFolder": {
            "type": "array",
            "default": null,
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "description": "The name of the folder in which rope stores project configurations and data.  Pass `null` for not using such a folder at all."
          }
        }
      }
    ],
    "grammars": [
      {
        "language": "xonsh",
        "scopeName": "source.xonsh",
        "path": "./dist/tmlang/xonsh.xml"
      },
      {
        "scopeName": "markdown.xonsh.codeblock",
        "path": "./dist/tmlang/injection.xml",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.xonsh": "xonsh"
        }
      }
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "pretty-quick --staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "devDependencies": {
    "@commitlint/cli": "^14.1",
    "@commitlint/config-conventional": "^13.0",
    "@types/node": "^16.0",
    "@typescript-eslint/eslint-plugin": "*",
    "@typescript-eslint/parser": "*",
    "esbuild": "^0.13.0",
    "eslint": "*",
    "eslint-config-prettier": "^8.3.0",
    "husky": "^7.0.0",
    "ovsx": "*",
    "prettier": "^2.0.0",
    "pretty-quick": "^3.1.0",
    "standard-version": "^9.1",
    "syntaxdev": "^0.1.3",
    "typescript": "^4.0.3",
    "vsce": "^1.81.1",
    "vscode": "^1.1.25",
    "watch": "^1.0.2"
  },
  "scripts": {
    "fmt": "prettier --write src",
    "build:syntax:xonsh": "syntaxdev build-plist --in src/tmlang/xonsh.syntax.yaml --out dist/tmlang/xonsh.xml",
    "build:syntax:inject": "syntaxdev build-plist --in src/tmlang/injection.yml --out dist/tmlang/injection.xml",
    "prebuild": "yarn build:syntax:xonsh && yarn build:syntax:inject",
    "build-base": "esbuild ./src/index.ts --bundle --outfile=dist/index.js --external:vscode --format=cjs --platform=node",
    "build": "yarn run build-base --sourcemap --minify",
    "watch": "yarn run build-base --sourcemap --watch",
    "package": "vsce package",
    "watch:syntax": "watch 'yarn prebuild' ./src/tmlang",
    "postinstall": "node ./node_modules/vscode/bin/install && husky install",
    "release": "yarn install && yarn lint && yarn build && standard-version && git push --follow-tags",
    "publish": "yarn package && vsce publish && ovsx publish --pat $OVS_PAT",
    "lint": "eslint --ext ts src",
    "test:synt": "syntaxdev test --syntax src/tmlang/xonsh.syntax.yaml --tests",
    "test:syntax": "yarn test:synt tests/**/*.xsh"
  },
  "dependencies": {
    "vscode-languageclient": "^7.0"
  }
}
